# Puerto del servidor
server.port=8080

# Nombre de la aplicación
spring.application.name=twitter-clone-api

# ========================================
# Configuración H2 (Desarrollo)
# ========================================
spring.datasource.url=jdbc:h2:mem:twitterdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# JPA/Hibernate para H2
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

spring.jpa.defer-datasource-initialization=true


# H2 Console
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# ========================================
# Configuración MySQL (Producción)
# Descomentar estas líneas para usar MySQL
# ========================================
#spring.datasource.url=jdbc:mysql://localhost:3306/twitterdb?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC
#spring.datasource.username=root
#spring.datasource.password=root
#spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
#spring.jpa.hibernate.ddl-auto=update

# Logging
logging.level.com.twitter.api=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.oauth2=TRACE

# ========================================
# AWS Cognito OAuth2 Configuration (Backend Client)
# ========================================
# El backend actúa como cliente OAuth2 confidencial usando client_id + client_secret
spring.security.oauth2.client.registration.cognito.client-id=6qm9hcg7bhalgbc0gttn7ieg89
spring.security.oauth2.client.registration.cognito.client-secret=1ep4cvjp9mhlba24kainnenb71gt1m3fvldgqj0gr3grfjp9qgec
spring.security.oauth2.client.registration.cognito.scope=openid,email,profile
spring.security.oauth2.client.registration.cognito.redirect-uri={baseUrl}/login/oauth2/code/cognito
spring.security.oauth2.client.registration.cognito.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.cognito.client-name=Cognito

# Cognito provider endpoints
spring.security.oauth2.client.provider.cognito.issuer-uri=https://cognito-idp.us-east-1.amazonaws.com/us-east-1_D5wDfF0jU
spring.security.oauth2.client.provider.cognito.authorization-uri=https://us-east-1d5wdff0ju.auth.us-east-1.amazoncognito.com/oauth2/authorize
spring.security.oauth2.client.provider.cognito.token-uri=https://us-east-1d5wdff0ju.auth.us-east-1.amazoncognito.com/oauth2/token
spring.security.oauth2.client.provider.cognito.user-info-uri=https://us-east-1d5wdff0ju.auth.us-east-1.amazoncognito.com/oauth2/userInfo
spring.security.oauth2.client.provider.cognito.jwk-set-uri=https://cognito-idp.us-east-1.amazonaws.com/us-east-1_D5wDfF0jU/.well-known/jwks.json
spring.security.oauth2.client.provider.cognito.user-name-attribute=sub

# Session management (cookies HttpOnly para seguridad)
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.secure=false
server.servlet.session.cookie.same-site=lax
server.servlet.session.cookie.domain=localhost
# Para producción (HTTPS con dominio propio):
# server.servlet.session.cookie.secure=true
# server.servlet.session.cookie.same-site=none
# server.servlet.session.cookie.domain=dominio.com